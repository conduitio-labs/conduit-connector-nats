// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package destination

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigConnectionName          = "connectionName"
	ConfigCredentialsFilePath     = "credentialsFilePath"
	ConfigMaxReconnects           = "maxReconnects"
	ConfigNkeyPath                = "nkeyPath"
	ConfigReconnectWait           = "reconnectWait"
	ConfigRetryAttempts           = "retryAttempts"
	ConfigRetryWait               = "retryWait"
	ConfigSubject                 = "subject"
	ConfigTlsClientCertPath       = "tls.clientCertPath"
	ConfigTlsClientPrivateKeyPath = "tls.clientPrivateKeyPath"
	ConfigTlsRootCACertPath       = "tls.rootCACertPath"
	ConfigUrls                    = "urls"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigConnectionName: {
			Default:     "",
			Description: "ConnectionName is the name of the connection that the connector establishes.\nSetting the connection is useful when monitoring the connector.\nThe default value is the connector ID.\nSee https://docs.nats.io/using-nats/developer/connecting/name.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigCredentialsFilePath: {
			Default:     "",
			Description: "CredentialsFilePath is the path to a credentials file.\nSee https://docs.nats.io/using-nats/developer/connecting/creds.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigMaxReconnects: {
			Default:     "5",
			Description: "MaxReconnects sets the number of reconnect attempts that will be\ntried before giving up. If negative, then it will never give up\ntrying to reconnect.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		ConfigNkeyPath: {
			Default:     "",
			Description: "NKeyPath is the path to an NKey.\nSee https://docs.nats.io/using-nats/developer/connecting/nkey.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigReconnectWait: {
			Default:     "5s",
			Description: "ReconnectWait is the wait time between reconnect attempts.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		ConfigRetryAttempts: {
			Default:     "3",
			Description: "RetryAttempts is the number of attempts to send a message after a failure.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{
				config.ValidationGreaterThan{V: 0},
			},
		},
		ConfigRetryWait: {
			Default:     "5s",
			Description: "RetryWait is the retry wait time after a failure to send a message.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		ConfigSubject: {
			Default:     "",
			Description: "Subject is the subject name.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigTlsClientCertPath: {
			Default:     "",
			Description: "TLSClientCertPath is the path to a client certificate.\nFor more details see https://docs.nats.io/using-nats/developer/connecting/tls.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigTlsClientPrivateKeyPath: {
			Default:     "",
			Description: "TLSClientPrivateKeyPath is the path to a private key.\nFor more details see https://docs.nats.io/using-nats/developer/connecting/tls.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigTlsRootCACertPath: {
			Default:     "",
			Description: "TLSRootCACertPath is the path to a root CA certificate.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigUrls: {
			Default:     "",
			Description: "URLs defines connection URLs.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
